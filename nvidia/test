#!/bin/bash

echo '--------------------------------------------------'
echo '|                Config Install                  |'
echo '--------------------------------------------------'

#Измените на своё:
username=neo
hostname=matrix
pass=1811
disk_root=/dev/nvme0n1p5
disk_boot=/dev/nvme0n1p4
#Раскомментируйте необходимое:
disk_swap=/dev/nvme0n1p6
#ucode=amd-ucode
ucode=intel-ucode
sleep=5

#setfont cyr-sun16:
loadkeys ru
setfont cyr-sun16
echo -e 'KEYMAP=ru\nFONT=cyr-sun16\n' >> /etc/vconsole.conf
echo '--------------------------------------------------'
echo '|              Install Arch Linux                |'
echo '--------------------------------------------------'
echo 'Install Arch Linux '$username'@'$hostname'		'
echo '--------------------------------------------------'

echo "Server = http://mirror.yandex.ru/archlinux/\$repo/os/\$arch" > /etc/pacman.d/mirrorlist
pacman -Sy sed --noconfirm

echo '--------------------------------------------------'
echo '|             Форматирование диска               |'
echo '--------------------------------------------------'
echo 'Format disk '$disk_root'@'$disk_boot'				'
echo '--------------------------------------------------'
#sleep:
sleep $sleep

echo '--------------------------------------------------'
echo '|             Разметка диска                      |'
echo '--------------------------------------------------'
#sleep:
sleep $sleep
#formating disk:
mkfs.btrfs -f $disk_root
#formating disk:
mkfs.vfat $disk_boot
#раскомментируйте необходимое:
#formatting disk:
mkswap $disk_swap
swapon $disk_swap
#mount mnt:
mount $disk_root /mnt
#cd /mnt:
cd /mnt
#su cr:
btrfs su cr @
#su cr:
btrfs su cr @home
#su cr:
btrfs su cr @var
#cd:
cd
#umount:
umount /mnt
#sleep
sleep $sleep
#sleep:
echo '--------------------------------------------------'
echo '|             Монтирование разделов               |'
echo '--------------------------------------------------'
#mount disk:
mount -o noatime,compress=zstd:3,space_cache=v2,discard=async,subvol=@ $disk_root /mnt
#mkdir folders:
mkdir /mnt/{var,home,boot}
#mkdir /boot/efi:
mkdir /mnt/boot/efi
#mount disk:
mount -o noatime,compress=zstd:3,space_cache=v2,discard=async,subvol=@home $disk_root /mnt/home
#mount disk:
mount -o noatime,compress=zstd:3,space_cache=v2,discard=async,subvol=@var $disk_root /mnt/var
#sleep:
sleep $sleep
#sleep:
echo '--------------------------------------------------'
echo '|             Установка Arch Linux                |'
echo '--------------------------------------------------'
#install arch:
pacstrap -K /mnt base base-devel linux-firmware refind efibootmgr iwd networkmanager micro htop btrfs-progs git ntfs-3g $ucode --noconfirm
#xorg
pacstrap -K -i /mnt xorg-server xorg-xinit mesa --noconfirm"
#font
pacstrap -K -i /mnt gnu-free-fonts --noconfirm"
#sound
pacstrap -K -i /mnt pipewire lib32-pipewire wireplumber pipewire-alsa pipewire-pulse pipewire-jack lib32-pipewire-jack --noconfirm"
#plasma kde
pacstrap -K -i /mnt plasma plasma-desktop breeze breeze-gtk kde-gtk-config --noconfirm"
#plasma
pacstrap -K -i /mnt dolphin dolphin-plugins konsole kdenlive gwenview elisa mpv kcalc kcalendarcore kdeconnect plasma-wayland-session kwalletmanager libva-utils vdpauinfo vulkan-icd-loader lib32-vulkan-icd-loader vulkan-headers vulkan-validation-layers vulkan-tools qt-gstreamer kdenetwork-filesharing spectacle --noconfirm"
#kde and drivers
pacstrap -K -i /mnt nvidia-dkms nvidia-utils opencl-nvidia nvidia-settings lib32-opencl-nvidia lib32-nvidia-utils cuda firefox gparted packagekit-qt5 ark engrampa caja p7zip unace brotli rpm-tools cpio latte-dock steam steam-native-runtime obs-studio blender krita qbittorrent telegram-desktop gnome-disk-utility icoutils wget bubblewrap zstd cabextract bc tar openssl gamemode desktop-file-utils curl dbus freetype2 gdk-pixbuf2 ttf-font zenity lsb-release nss xorg-xrandr vulkan-driver lsof lib32-freetype2 lib32-libgl lib32-gcc-libs lib32-libx11 lib32-libxss lib32-alsa-plugins lib32-libgpg-error lib32-nss lib32-vulkan-driver lib32-gamemode lib32-openssl meson gst-libav gst-plugins-bad gst-plugins-base gst-plugins-good gst-plugins-ugly ffnvcodec-headers samba cifs-utils extra-cmake-modules plasma-framework gst-libav base-devel mpv python-websockets qt5-declarative qt5-websockets qt5-webchannel cmake --noconfirm"
#sddm
pacstrap -K -i /mnt sddm --noconfirm"
#bluetooth
pacstrap -K -i /mnt bluez bluez-utils --noconfirm"
#cpupower
pacstrap -K -i /mnt cpupower --noconfirm"
#fstab generation:
genfstab -U -p /mnt >> /mnt/etc/fstab
#passwd root:
(
    echo $pass
    echo $pass
) | arch-chroot /mnt /bin/bash -c "passwd"

#add user:
useradd -G wheel -s /bin/bash -m $username
#passwd user:
(
    echo $pass
    echo $pass
) | arch-chroot /mnt /bin/bash -c "passwd $username"
arch-chroot /mnt /bin/bash -c "echo 'FONT=cyr-sun16' >> /etc/vconsole.conf"
#mount boot:
arch-chroot /mnt /bin/bash -c "mount $disk_boot /boot/efi"
#hostname:
arch-chroot /mnt /bin/bash -c "echo $hostname >> /etc/hostname"
#locale eng:
arch-chroot /mnt /bin/bash -c "sed -i 's/#en_US.U/en_US.U/g' /etc/locale.gen"
#locale rus:
arch-chroot /mnt /bin/bash -c "sed -i 's/#ru_RU.U/ru_RU.U/g' /etc/locale.gen"
#locale generation:
arch-chroot /mnt /bin/bash -c "locale-gen"
#locale conf:
arch-chroot /mnt /bin/bash -c "echo LANG=en_US.UTF-8 >> /etc/locale.conf"
#locale conf:
arch-chroot /mnt /bin/bash -c "echo LANG=ru_RU.UTF-8 >> /etc/locale.conf"
#pacman.conf:
arch-chroot /mnt /bin/bash -c "sed 's/#ParallelDownloads = 5/ParallelDownloads = 5/' -i /etc/pacman.conf"
#pacman.conf:
arch-chroot /mnt /bin/bash -c "echo -e '[multilib]\nInclude = /etc/pacman.d/mirrorlist\n' >> /etc/pacman.conf"
#install core lqx:
arch-chroot /mnt /bin/bash -c "pacman-key --keyserver hkps://keyserver.ubuntu.com --recv-keys 9AE4078033F8024D"
#install core lqx:
arch-chroot /mnt /bin/bash -c "pacman-key --lsign-key 9AE4078033F8024D"
#install core lqx:
arch-chroot /mnt /bin/bash -c "echo '[liquorix]' >> /etc/pacman.conf"
#install core lqx:
arch-chroot /mnt /bin/bash -c "echo 'Server = https://liquorix.net/archlinux/$repo/$arch' >> /etc/pacman.conf"
#pacman —Sy:
pacman -Sy
#install core lqx:
pacman -S linux-lqx linux-lqx-headers --noconfirm
#sudoers:
#без запроса пароля:
#arch-chroot /mnt /bin/bash -c "sed 's/# %wheel ALL=(ALL:ALL) NOPASSWD: ALL/%wheel ALL=(ALL:ALL) NOPASSWD: ALL/' -i /etc/sudoers"
#с запросом пароля:
arch-chroot /mnt /bin/bash -c "sed 's/# %wheel ALL=(ALL:ALL) ALL/%wheel ALL=(ALL:ALL) ALL/' -i /etc/sudoers"
#chown:
arch-chroot /mnt /bin/bash -c "chown -R $username:users /home/$username/"
arch-chroot /mnt /bin/bash -c "echo "root:$pass" | arch-chroot /mnt chpasswd"
#blkid:
uuid=$(blkid -s UUID -o value $disk_root)
#раскомментируйте необходимое:
#refind nvidia:
arch-chroot /mnt /bin/bash -c "echo '"Boot to standard options" "rw root=UUID='$uuid' rootflags=subvol=@ loglevel=0 quiet splash rootfstype=btrfs nvidia-drm.modeset=1"' >> /boot/refind_linux.conf"
#refind nvidia:
arch-chroot /mnt /bin/bash -c "echo '"Boot to single-user mode" "rw root=UUID='$uuid' rootflags=subvol=@ loglevel=0 quiet splash rootfstype=btrfs nvidia-drm.modeset=1 single"' >> /boot/refind_linux.conf"
#refind mesa:
#arch-chroot /mnt /bin/bash -c "echo '"Boot to standard options" "rw root=UUID='$uuid' rootflags=subvol=@ loglevel=0 quiet splash rootfstype=btrfs"' >> /boot/refind_linux.conf"
#refind mesa:
#arch-chroot /mnt /bin/bash -c "echo '"Boot to single-user mode" "rw root=UUID='$uuid' rootflags=subvol=@ loglevel=0 quiet splash rootfstype=btrfs single"' >> /boot/refind_linux.conf"
#refind:
arch-chroot /mnt /bin/bash -c "echo '"Boot with minimal options ro root='$disk_root'"' >> /boot/refind_linux.conf"
#refind:
arch-chroot /mnt /bin/bash -c "refind-install"
#timezone:
arch-chroot /mnt /bin/bash -c "imedatectl set-timezone Asia/Krasnoyarsk"
#install zsh:
echo '--------------------------------------------------'
echo '|            Установка оболочки zsh              |'
echo '--------------------------------------------------'
#zsh:
arch-chroot /mnt /bin/bash -c "pacman -Sy zsh zsh-completions zsh-syntax-highlighting zsh-autosuggestions grml-zsh-config --noconfirm"
#zsh chsh:
arch-chroot /mnt /bin/bash -c "chsh -s /bin/zsh"
#zsh chsh root:
arch-chroot /mnt /bin/bash -c "chsh -s /bin/zsh/$username"
#zsh:
arch-chroot /mnt /bin/bash -c "cd /root/"
arch-chroot /mnt /bin/bash -c "wget 'https://raw.githubusercontent.com/like913/arch-install/master/config/.zshrc'"
#zsh:
arch-chroot /mnt /bin/bash -c "cd /home/$username/"
arch-chroot /mnt /bin/bash -c "wget 'https://raw.githubusercontent.com/like913/arch-install/master/config/.zshrc'"
#chown:
arch-chroot /mnt /bin/bash -c "chown -R $username:users .zshrc"
#chpasswd
arch-chroot /mnt /bin/bash -c "echo "$username:$pass" | arch-chroot /mnt chpasswd"
#services:
arch-chroot /mnt /bin/bash -c "systemctl enable iwd.service"
#services:
arch-chroot /mnt /bin/bash -c "systemctl enable NetworkManager.service"
#cpupower
arch-chroot /mnt /bin/bash -c "cpupower frequency-set -g performance"
#mkinitcpio.conf:
#Раскомментируйте на необходимое:
#nvidia modules:
arch-chroot /mnt /bin/bash -c "sed 's/MODULES=()/MODULES=(nvidia nvidia_modeset nvidia_uvm nvidia_drm btrfs)/g' -i /etc/mkinitcpio.conf"
#enviroment:
arch-chroot /mnt /bin/bash -c "echo 'NVD_BACKEND=direct' >> /etc/enviroment"
#enviroment:
arch-chroot /mnt /bin/bash -c "echo 'MOZ_DISABLE_RDD_SANDBOX=1' >> /etc/enviroment"
#enviroment nvidia:
arch-chroot /mnt /bin/bash -c "echo 'LIBVA_DRIVER_NAME=nvidia' >> /etc/enviroment"
#enviroment:
arch-chroot /mnt /bin/bash -c "echo 'EDITOR=micro' >> /etc/enviroment"
#enviroment:
arch-chroot /mnt /bin/bash -c "echo 'EGL_PLATFORM=wayland' >> /etc/enviroment"
#enviroment:
arch-chroot /mnt /bin/bash -c "echo 'MOZ_ENABLE_WAYLAND=1 firefox' >> /etc/enviroment"
#samba:
arch-chroot /mnt /bin/bash -c "echo '[global]' >> /etc/samba/smb.conf"
#samba:
arch-chroot /mnt /bin/bash -c "echo 'usershare path = /var/lib/samba/usershares' >> /etc/samba/smb.conf"
#samba:
arch-chroot /mnt /bin/bash -c "echo 'usershare max shares = 100' >> /etc/samba/smb.conf"
#samba:
arch-chroot /mnt /bin/bash -c "echo 'usershare allow guests = yes' >> /etc/samba/smb.conf"
#samba:
arch-chroot /mnt /bin/bash -c "echo 'usershare owner only = yes' >> /etc/samba/smb.conf"
#samba:
(  echo $pass 
   echo $pass ) | arch-chroot /mnt /bin/bash -c "smbpasswd -a $username"
#samba:
arch-chroot /mnt /bin/bash -c "usermod -m users -G wheel $username"
#samba:
arch-chroot /mnt /bin/bash -c "mkdir /var/lib/samba/usershares"
#samba:
arch-chroot /mnt /bin/bash -c "chown -R root:users /var/lib/samba/usershares"
#samba:
arch-chroot /mnt /bin/bash -c "chmod -R 1770 /var/lib/samba/usershares"
#samba:
arch-chroot /mnt /bin/bash -c "gpasswd users -a $username"
#samba:
arch-chroot /mnt /bin/bash -c "systemctl enable smb"
#samba:
arch-chroot /mnt /bin/bash -c "systemctl enable nmb"
#services:
arch-chroot /mnt /bin/bash -c "systemctl enable sddm"
#services:
arch-chroot /mnt /bin/bash -c "systemctl enable bluetooth"
#services:
arch-chroot /mnt /bin/bash -c "systemctl enable cpupower"
#services:
arch-chroot /mnt /bin/bash -c "systemctl enable xow"
#mkinitcpio:
arch-chroot /mnt /bin/bash -c "mkinitcpio -P"
#install portproton:
arch-chroot /mnt /bin/bash -c "cd /home/$username/"
#install:
arch-chroot /mnt /bin/bash -c "wget -c "https://github.com/Castro-Fidel/PortWINE/raw/master/portwine_install_script/PortProton_1.0" && sh PortProton_1.0 -rus"
echo '--------------------------------------------------'
echo '|                 Перезагрузка                   |'
echo '--------------------------------------------------'
umount -R /mnt/
reboot
